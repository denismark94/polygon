
# Работа с уддаенной машиной
# ------------------------------------------------------------------------------------------------------------------------------------тут отправка и работа с ssh
              # recipient = 'lynx2'
              # self.connect(host=host, username=sender, password=secret)
              # code = self.send(name=sender, sender_email=sender, recipient_email=recipient, password=secret)
              # print(code)
              # self.disconnect()
#------------------------------------------------------------------------------------------------------------------------------------тут отправка и работа с ssh


          # texTab = QtGui.QTextItem('dfsg')
          # self.ts.tableWidget_2.setItem(1, 1, texTab)
          #
          # self.ts.lineEdit_3.setText(text)              # запись в Edit
#------------------------------------------------------------------------------------------------------------------------------------тут отправка и работа с ssh
    # def connect (self, host, username, password): #функция отетственна за подключение ssh: ssh lynx@192.168.10.17 + password
    #     self.exit_code = 0
    #     try:
    #         self.client.connect(hostname=host, username=username, password=password, timeout=10)
    #     except TimeoutError:
    #         print('Timeout reached while connecting to {0}'.format(host), file=sys.stderr)
    #         self.exit_code = 3
    #
    # def disconnect(self): #exit в ssh
    #     self.client.close()
    #
    # def execute(self, command): #прямое исполнение кода в командной строке
    #     stdin, stdout, stderr = self.client.exec_command(command)
    #     exit_code = stdout.channel.recv_exit_status()
    #     output = stdout.readlines()
    #     return exit_code, output
    #
    # def send(self, name, sender_email, recipient_email, password, verbose=True):
    #     # exit codes: 0 - ok, 1 - error, 3 - connection timeout
    #     if not self.exit_code:
    #         # command1 = './send.sh -n ' + name + \
    #         #           ' -r ' + recipient_email +  \
    #         #           ' -u ' + sender_email + \
    #         #           ' -p ' + password + \
    #         #           (' -v' if verbose else '')
    #         command1 = 'ifconfig'
    #         self.exit_code, output = self.execute(command1)
    #         if verbose:
    #             for i in output:
    #                 print(i, end='')
    #     return self.exit_code
    #
    # def receive(self, name, password, verbose=True, erase=True):
    #     # exit codes: 0 - ok, 1 - no messages, 2 - error, 3 - connection timeout
    #
    #     if not self.exit_code:
    #         command2 = './receive.sh -u ' + name + ' -p ' + password + ' -i '+ \
    #                   (' -v' if verbose else '') + (' -e' if erase else '')
    #         self.exit_code, output = self.execute(command2)
    #         if verbose:
    #             for i in output:
    #                 print(i, end='11')
    #         if self.exit_code == 0:
    #             print(i, end='22')
    #     return self.exit_code
#------------------------------------------------------------------------------------------------------------------------------------


















        # config = configparser.ConfigParser()  # создаём объекта парсера
        # config.read("Conf.ini")  # читаем конфиг
        # self.ts.lineEdit_2.setText(int(config["SetWork"]["Inter"]))       # запись из ini в Edit
        # self.ts.lineEdit_3.setText(int(config["SetWork"]["KolvoPot"]))
        # self.ts.lineEdit_4.setText(int(config["SetWork"]["Post"]))